install.packages("rotl")
install.packages("rotl")
install.packages("rotl")
install.packages(c("ade4", "adegenet", "akima", "backports", "BH", "bibtex", "BiocManager", "bitops", "blob", "bold", "bookdown", "broom", "caTools", "clipr", "clusterGeneration", "coda", "colorspace", "corHMM", "crayon", "crosstalk", "crul", "curl", "data.table", "DBI", "dbplyr", "deldir", "digest", "diversitree", "doMC", "doParallel", "dplyr", "DT", "e1071", "ellipsis", "emmeans", "expm", "fansi", "farver", "fastmap", "fastmatch", "forcats", "fst", "generics", "ggforce", "ggplot2", "git2r", "glue", "gmp", "gtools", "HardyWeinberg", "haven", "highr", "hisse", "hms", "htmltools", "htmlwidgets", "httpuv", "IRdisplay", "IRkernel", "isoband", "iterators", "jackalope", "jsonlite", "knitcitations", "knitr", "labeling", "later", "logistf", "lubridate", "magick", "magrittr", "manipulateWidget", "mice", "mime", "mnormt", "mvtnorm", "oai", "officer", "ontologyIndex", "openssl", "pbdZMQ", "pca3d", "pegas", "phangorn", "phytools", "pillar", "pixmap", "plotrix", "polysat", "pracma", "progressr", "promises", "R.methodsS3", "R.oo", "R.utils", "R6", "raster", "Rcpp", "RcppArmadillo", "RcppEigen", "RcppParallel", "RCurl", "reactlog", "readr", "redoc", "RefManageR", "rentrez", "repr", "reprex", "rgbif", "rgeos", "rgl", "ritis", "rmarkdown", "Rmpfr", "rotl", "roxygen2", "rprojroot", "rredlist", "rversions", "rvest", "segmented", "seqinr", "sf", "shiny", "shinyjs", "solrium", "sp", "spData", "spdep", "splancs", "stringi", "sys", "taxize", "tibble", "tidyr", "tidyselect", "tidyverse", "tinytex", "treeplyr", "tweenr", "units", "utf8", "vctrs", "vegan", "viridis", "viridisLite", "WikidataR", "xfun", "XML", "zoo"))
install.packages("rotl")
install.packages("rncl")
packages <- c("rotl", "ape", "devtools", "stringr")
install.packages(packages)
library(rotl)
library(devtools)
library(stringr)
devtools::install_github("phylotastic/datelife")
library(emo)
devtools::install_github("hadley/emo")
library(emo)
packages <- c("rotl", "ape", "devtools", "stringr")
install.packages(packages)
library(rotl)
library(devtools)
library(stringr)
devtools::install_github("phylotastic/datelife")
install.packages(packages)
packages <- c("rotl", "ape", "devtools", "stringr")
install.packages(packages)
library(rotl)
library(devtools)
library(stringr)
devtools::install_github("phylotastic/datelife")
library("msa")
library("rncl")
devtools::install_github("phylotastic/datelife")
library(msa)
library(msaR)
if (!requireNamespace("BiocManager", quietly=TRUE))
install.packages("BiocManager")
BiocManager::install("msa")
BiocManager::install("msa")
BiocManager::install("msa")
BiocManager::install("msa")
BiocManager::install("msa")
library(taxoize)
library(taxize)
library(xml2)
devtools::install_github("r-lib/xml2")
library(taxize)
install.packages("shiny")
library(httr)
library(jsonlite)
library(rgbif)
library(rotl)
library(phytools)
install.packages(c("httr", "jsonlite", "rgbif", "phytools"))
library(httr)
library(jsonlite)
library(rgbif)
library(rgbif)
library(rotl)
library(viridis)
install.packages(c("httr", "jsonlite", "rgbif", "rotol", "phytools", "viridis"))
install.packages(c("httr", "jsonlite", "rgbif", "rotol", "phytools", "viridis"))
library(rotl)
library(rotol)
install.packages(c("httr", "jsonlite", "rgbif", "rotl", "phytools", "viridis"))
polarbear <-"Ursus maritimus"
hippo <-"Hippopotamus amphibius"
boar <-"Sus scrofa"
gorilla <- "Gorilla gorilla"
dolphin <- "Tursiops truncatus"
dat1 <- occ_search(scientificName = polarbear, fields=c('name','decimalLatitude', 'decimalLongitude'), limit = 10)
polarbear <-"Ursus maritimus"
hippo <-"Hippopotamus amphibius"
boar <-"Sus scrofa"
gorilla <- "Gorilla gorilla"
dolphin <- "Tursiops truncatus"
spp <- c(polarbear, boar, gorilla, hippo,dolphin)
spp <- c(polarbear, boar, gorilla, hippo,dolphin)
taxa <- tnrs_match_names(spp, context="Animals")
tr <- tol_induced_subtree(ott_id(taxa), label="name")
plot(tr)
library(rotl)
polarbear <-"Ursus maritimus"
hippo <-"Hippopotamus amphibius"
boar <-"Sus scrofa"
gorilla <- "Gorilla gorilla"
dolphin <- "Tursiops truncatus"
spp <- c(polarbear, boar, gorilla, hippo,dolphin)
spp <- c(polarbear, boar, gorilla, hippo,dolphin)
We can use Open Tree of Life to generate a tree for our species!
![](OpenTree-final-logo-copy.png)
```{r}
taxa <- tnrs_match_names(spp, context="Animals")
tr <- tol_induced_subtree(ott_id(taxa), label="name")
plot(tr)
```
taxa <- tnrs_match_names(spp, context="Animals")
tr <- tol_induced_subtree(ott_id(taxa), label="name")
plot(tr)
url_ot <- 'https://api.opentreeoflife.org/v3/tree_of_life/induced_subtree'
body <- list(ott_ids=taxa$ott_id)
r <- POST(url_ot, body = body, encode = "json")#gets which studies support the subtree from  the open tree API
for(studytree in content(r)$supporting_studies){
study <-  strsplit(studytree, '@')[[1]][1]
meta <- get_study_meta(study) #pulls the metadata for each study
pub <- get_publication(meta)  #grabs teh publication information
cat(pub,"\n\n")
}
taxa <- rotl::tnrs_match_names(spp, context="Animals")
tr <-  rotl::tol_induced_subtree(ott_id(taxa), label="name")
r <- httr::POST(url_ot, body = body, encode = "json")#gets which studies support the subtree from  the open tree API
for(studytree in httr::content(r)$supporting_studies){
study <-  strsplit(studytree, '@')[[1]][1]
meta <- get_study_meta(study) #pulls the metadata for each study
pub <- get_publication(meta)  #grabs teh publication information
cat(pub,"\n\n")
}
dat1 <- rgbif::occ_search(scientificName = polarbear, fields=c('name','decimalLatitude', 'decimalLongitude'), limit = 10)
locsdat1 <- cbind(polarbear, dat1$data) #labels the lat long columns with the species name
colnames(locsdat1)<-c("species","Long","Lat")
dat2 <- rgbif::occ_search(scientificName = hippo, fields=c('name','decimalLatitude', 'decimalLongitude'), limit = 10)
dat2 <- rgbif::occ_search(scientificName = hippo, fields=c('name','decimalLatitude', 'decimalLongitude'), limit = 10)
locsdat2 <- cbind(hippo, dat2$data)
colnames(locsdat2)<-c("species","Long","Lat")
dat3 <- rgbif::occ_search(scientificName = boar,  fields=c('name','decimalLatitude', 'decimalLongitude'), limit = 10)
dat3 <- rgbif::occ_search(scientificName = boar,  fields=c('name','decimalLatitude', 'decimalLongitude'), limit = 10)
locsdat3 <- cbind(boar, dat3$data)
dat4 <- rgbif::occ_search(scientificName = gorilla, fields=c('name','decimalLatitude', 'decimalLongitude'), limit = 10)
dat4 <- rgbif::occ_search(scientificName = gorilla, fields=c('name','decimalLatitude', 'decimalLongitude'), limit = 10)
locsdat4 <- cbind(gorilla, dat4$data)
locsdat4 <- cbind(gorilla, dat4$data)
colnames(locsdat4)<-c("species","Long","Lat")
dat5 <- rgbif::occ_search(scientificName = dolphin, fields=c('name','decimalLatitude', 'decimalLongitude'), limit = 10)
dat5 <- rgbif::occ_search(scientificName = dolphin, fields=c('name','decimalLatitude', 'decimalLongitude'), limit = 10)
locsdat5 <- cbind(dolphin, dat5$data)
locsdat5 <- cbind(dolphin, dat5$data)
colnames(locsdat5)<-c("species","Long","Lat")
locs <- as.data.frame(rbind(locsdat1,locsdat2, locsdat3, locsdat4, locsdat5)) #Combine the data from each species
locs
dat1 <- rgbif::occ_search(scientificName = polarbear, fields=c('name','decimalLatitude', 'decimalLongitude'), limit = 10)
dat1 <- rgbif::occ_search(scientificName = polarbear, fields=c('name','decimalLatitude', 'decimalLongitude'), limit = 10)
locsdat1 <- cbind(polarbear, dat1$data) #labels the lat long columns with the species name
colnames(locsdat1)<-c("species","Long","Lat")
dat2 <- rgbif::occ_search(scientificName = hippo, fields=c('name','decimalLatitude', 'decimalLongitude'), limit = 10)
dat2 <- rgbif::occ_search(scientificName = hippo, fields=c('name','decimalLatitude', 'decimalLongitude'), limit = 10)
locsdat2 <- cbind(hippo, dat2$data)
colnames(locsdat1)<-c("species","Long","Lat")
dat2 <- rgbif::occ_search(scientificName = hippo, fields=c('name','decimalLatitude', 'decimalLongitude'), limit = 10)
locsdat2 <- cbind(hippo, dat2$data)
colnames(locsdat2)<-c("species","Long","Lat")
colnames(locsdat2)<-c("species","Long","Lat")
dat3 <- rgbif::occ_search(scientificName = boar,  fields=c('name','decimalLatitude', 'decimalLongitude'), limit = 10)
locsdat2 <- cbind(hippo, dat2$data)
colnames(locsdat2)<-c("species","Long","Lat")
dat3 <- rgbif::occ_search(scientificName = boar,  fields=c('name','decimalLatitude', 'decimalLongitude'), limit = 10)
locsdat3 <- cbind(boar, dat3$data)
colnames(locsdat3)<-c("species","Long","Lat")
colnames(locsdat2)<-c("species","Long","Lat")
dat3 <- rgbif::occ_search(scientificName = boar,  fields=c('name','decimalLatitude', 'decimalLongitude'), limit = 10)
locsdat3 <- cbind(boar, dat3$data)
colnames(locsdat3)<-c("species","Long","Lat")
dat4 <- rgbif::occ_search(scientificName = gorilla, fields=c('name','decimalLatitude', 'decimalLongitude'), limit = 10)
locsdat3 <- cbind(boar, dat3$data)
colnames(locsdat3)<-c("species","Long","Lat")
dat4 <- rgbif::occ_search(scientificName = gorilla, fields=c('name','decimalLatitude', 'decimalLongitude'), limit = 10)
locsdat4 <- cbind(gorilla, dat4$data)
locsdat3 <- cbind(boar, dat3$data)
colnames(locsdat3)<-c("species","Long","Lat")
dat4 <- rgbif::occ_search(scientificName = gorilla, fields=c('name','decimalLatitude', 'decimalLongitude'), limit = 10)
locsdat4 <- cbind(gorilla, dat4$data)
colnames(locsdat4)<-c("species","Long","Lat")
dat4 <- rgbif::occ_search(scientificName = gorilla, fields=c('name','decimalLatitude', 'decimalLongitude'), limit = 10)
locsdat4 <- cbind(gorilla, dat4$data)
colnames(locsdat4)<-c("species","Long","Lat")
dat5 <- rgbif::occ_search(scientificName = dolphin, fields=c('name','decimalLatitude', 'decimalLongitude'), limit = 10)
locsdat4 <- cbind(gorilla, dat4$data)
colnames(locsdat4)<-c("species","Long","Lat")
dat5 <- rgbif::occ_search(scientificName = dolphin, fields=c('name','decimalLatitude', 'decimalLongitude'), limit = 10)
locsdat5 <- cbind(dolphin, dat5$data)
colnames(locsdat5)<-c("species","Long","Lat")
colnames(locsdat4)<-c("species","Long","Lat")
dat5 <- rgbif::occ_search(scientificName = dolphin, fields=c('name','decimalLatitude', 'decimalLongitude'), limit = 10)
locsdat5 <- cbind(dolphin, dat5$data)
colnames(locsdat5)<-c("species","Long","Lat")
locs <- as.data.frame(rbind(locsdat1,locsdat2, locsdat3, locsdat4, locsdat5)) #Combine the data from each species
locsdat4 <- cbind(gorilla, dat4$data)
colnames(locsdat4)<-c("species","Long","Lat")
dat5 <- rgbif::occ_search(scientificName = dolphin, fields=c('name','decimalLatitude', 'decimalLongitude'), limit = 10)
locsdat5 <- cbind(dolphin, dat5$data)
colnames(locsdat5)<-c("species","Long","Lat")
locs <- as.data.frame(rbind(locsdat1,locsdat2, locsdat3, locsdat4, locsdat5)) #Combine the data from each species
locs
locs[,1] <- gsub(' ','_',locs[,1])#On the tree, names have underscores instead of spaces.
#Sometimes the lat longs have spaces in the records.
#We use trimws to get rid of the whitespace, and as.numeric to record the the latitudes and longitudes as numbers instead of characters.
locs[,2]<-as.numeric(trimws(as.character(locs[,2])))
locs[,3]<-as.numeric(trimws(as.character(locs[,3])))
latlong <- as.matrix(locs[,c(3,2)]) #flip the columns to lat, long instead of long,lat
rownames(latlong) <- locs[,1]
locs[,1] <- gsub(' ','_',locs[,1])#On the tree, names have underscores instead of spaces.
#Sometimes the lat longs have spaces in the records.
#We use trimws to get rid of the whitespace, and as.numeric to record the the latitudes and longitudes as numbers instead of characters.
locs[,2]<-as.numeric(trimws(as.character(locs[,2])))
locs[,3]<-as.numeric(trimws(as.character(locs[,3])))
latlong <- as.matrix(locs[,c(3,2)]) #flip the columns to lat, long instead of long,lat
rownames(latlong) <- locs[,1]
```{r}
# Now to join together the geographic information with the phylogenetic information!
Trees from OpenTree don't automatically come with branch lengths - we need to infer some branch lengths for this tree in order to plot it. (in fruture we can use R-Datelife! datelife.org)
locs[,1] <- gsub(' ','_',locs[,1])#On the tree, names have underscores instead of spaces.
#Sometimes the lat longs have spaces in the records.
#We use trimws to get rid of the whitespace, and as.numeric to record the the latitudes and longitudes as numbers instead of characters.
locs[,2]<-as.numeric(trimws(as.character(locs[,2])))
locs[,3]<-as.numeric(trimws(as.character(locs[,3])))
latlong <- as.matrix(locs[,c(3,2)]) #flip the columns to lat, long instead of long,lat
rownames(latlong) <- locs[,1]
latlong
tr_bl<-compute.brlen(tr)
tr_bl<-phylo::compute.brlen(tr)
tr_bl<-ape::compute.brlen(tr)
cols<-setNames(sample(viridis(n=Ntip(tr_bl))),
tr_bl$tip.label)# This sets the colors to pretty colors
library("viridis")
cols<-setNames(sample(viridis(n=Ntip(tr_bl))),
tr_bl$tip.label)# This sets the colors to pretty colors
cols<-setNames(sample(viridis(n=phylo::Ntip(tr_bl))),
tr_bl$tip.label)# This sets the colors to pretty colors
cols<-setNames(sample(viridis(n=ape::Ntip(tr_bl))),
tr_bl$tip.label)# This sets the colors to pretty colors
tdobj<-phylo.to.map(tr_bl,latlong,plot = FALSE, direction="rightwards")
tdobj<-ape::phylo.to.map(tr_bl,latlong,plot = FALSE, direction="rightwards")
tdobj<-phytools::phylo.to.map(tr_bl,latlong,plot = FALSE, direction="rightwards")
plot(tdobj, colors=cols, direction="rightwards")
#If there is an error with 'cols' try this instead:
#plot(tdobj, direction="rightwards")
spp2 <- c("Mimulous guttatus","Arabidopsis thaliana", "Musa gracilis", "Carex capitata")
taxa2 <- rotl::tnrs_match_names(spp2)
tr2 <- rotl::tol_induced_subtree(ott_id(taxa2), label="name")
tr_bl2<-ape::compute.brlen(tr2)
taxa2[,"gbif"] <- NA
locs = data.frame(matrix(vector(), nrow(taxa2), 2))
i=1
for(id in taxa2$ott_id){
tax_info <- taxonomy_taxon_info(id)
for(source in tax_info[[1]]$tax_sources){
if (grepl('gbif', source, fixed=TRUE)){
gbif_id <- strsplit(source,":")[[1]][2]
taxa2[i,]$gbif <-gbif_id
result <- occ_search(taxonKey = gbif_id, fields=c('name','decimalLatitude', 'decimalLongitude'), limit = 5)
if (dim(result$data)[1] > 0) {
try(locs[i,1] <- as.data.frame(result$data)[2])
try(locs[i,2] <- as.data.frame(result$data)[1])
}
}}
i = i + 1}
tax_info <- rotl::taxonomy_taxon_info(id)
for(id in taxa2$ott_id){
tax_info <- rotl::taxonomy_taxon_info(id)
for(source in tax_info[[1]]$tax_sources){
if (grepl('gbif', source, fixed=TRUE)){
gbif_id <- strsplit(source,":")[[1]][2]
taxa2[i,]$gbif <-gbif_id
result <- occ_search(taxonKey = gbif_id, fields=c('name','decimalLatitude', 'decimalLongitude'), limit = 5)
if (dim(result$data)[1] > 0) {
try(locs[i,1] <- as.data.frame(result$data)[2])
try(locs[i,2] <- as.data.frame(result$data)[1])
}
}}
i = i + 1}
result <- gbif::occ_search(taxonKey = gbif_id, fields=c('name','decimalLatitude', 'decimalLongitude'), limit = 5)
spp2 <- c("Mimulous guttatus","Arabidopsis thaliana", "Musa gracilis", "Carex capitata")
taxa2 <- rotl::tnrs_match_names(spp2)
taxa2 <- rotl::tnrs_match_names(spp2)
tr2 <- rotl::tol_induced_subtree(ott_id(taxa2), label="name")
tr2 <- rotl::tol_induced_subtree(ott_id(taxa2), label="name")
tr_bl2<-ape::compute.brlen(tr2)
tr_bl2<-ape::compute.brlen(tr2)
taxa2[,"gbif"] <- NA
i=1
for(id in taxa2$ott_id){
tax_info <- rotl::taxonomy_taxon_info(id)
for(source in tax_info[[1]]$tax_sources){
if (grepl('gbif', source, fixed=TRUE)){
gbif_id <- strsplit(source,":")[[1]][2]
taxa2[i,]$gbif <-gbif_id
result <- rgbif::occ_search(taxonKey = gbif_id, fields=c('name','decimalLatitude', 'decimalLongitude'), limit = 5)
if (dim(result$data)[1] > 0) {
try(locs[i,1] <- as.data.frame(result$data)[2])
try(locs[i,2] <- as.data.frame(result$data)[1])
}
}}
i = i + 1}
for(id in taxa2$ott_id){
tax_info <- rotl::taxonomy_taxon_info(id)
for(source in tax_info[[1]]$tax_sources){
if (grepl('gbif', source, fixed=TRUE)){
gbif_id <- strsplit(source,":")[[1]][2]
taxa2[i,]$gbif <-gbif_id
result <- rgbif::occ_search(taxonKey = gbif_id, fields=c('name','decimalLatitude', 'decimalLongitude'), limit = 5)
if (dim(result$data)[1] > 0) {
try(locs[i,1] <- as.data.frame(result$data)[2])
try(locs[i,2] <- as.data.frame(result$data)[1])
}
}}
i = i + 1}
rownames(locs) <- gsub(' ','_',taxa2$unique_name)
plot(tr2)
spp2 <- c("Mimulous guttatus","Arabidopsis thaliana", "Musa gracilis", "Carex capitata")
taxa2 <- rotl::tnrs_match_names(spp2)
tr2 <- rotl::tol_induced_subtree(ott_id(taxa2), label="name")
tr_bl2<-ape::compute.brlen(tr2)
taxa2[,"gbif"] <- NA
locs = data.frame(matrix(vector(), nrow(taxa2), 2))
i=1
for(id in taxa2$ott_id){
tax_info <- rotl::taxonomy_taxon_info(id)
for(source in tax_info[[1]]$tax_sources){
if (grepl('gbif', source, fixed=TRUE)){
gbif_id <- strsplit(source,":")[[1]][2]
taxa2[i,]$gbif <-gbif_id
result <- rgbif::occ_search(taxonKey = gbif_id, fields=c('name','decimalLatitude', 'decimalLongitude'), limit = 5)
if (dim(result$data)[1] > 0) {
try(locs[i,1] <- as.data.frame(result$data)[2])
try(locs[i,2] <- as.data.frame(result$data)[1])
}
}}
i = i + 1}
gsub(' ','_',taxa2$unique_name)
rownames(locs) <- gsub(' ','_',taxa2$unique_name)
colnames(locs) <- c("latitude","longitude")
plot(tr2)
taxa2
tdobj2<-phytools::phylo.to.map(tr_bl2,locs, plot = FALSE, direction="rightwards")
plot(tdobj2, direction="rightwards")
install.packages("papaja")
library(datelife)
install.packages('datelife')
install.packages('devtools')
devtools::install_github("phylotastic/datelife")
canis_node_subtree <- rotl::tol_subtree(node_id = canis_node_info$node_id, label = "name")
datelife::
library(ape)
plot(rlineage(0.1, 0.05)) # simple birth-death process
plot(rlineage(0.1, 0.05)) # simple birth-death process
tree <- rtree(n = 20)
plot(tree)
plot(tree)
tree <- rtree(n = 20)
library(ape)
text <- 'Testing to be translated'
jsonlite::toJSON(list(list(Text=text)), auto_unbox=TRUE)
nids <- c("ott5839486","mrcaott109888ott176333")
jsonlite::toJSON(list(list(Text=nids)), auto_unbox=TRUE)
nids <- c("ott5839486","mrcaott109888ott176333")
jsonlite::toJSON(list(list("node_ids"=nids)), auto_unbox=TRUE)
nids <- c("ott5839486","mrcaott109888ott176333")
jsonlite::toJSON(list("node_ids"=nids), auto_unbox=TRUE)
synth_id = "snacktavish_aves_81461_tmpr7hqi81k"
nids <- c("ott5839486","mrcaott109888ott176333")
jsonlite::toJSON("synth_id" = synth_id, list("node_ids"=nids), auto_unbox=TRUE)
synth_id = "snacktavish_aves_81461_tmpr7hqi81k"
nids <- c("ott5839486","mrcaott109888ott176333")
jsonlite::toJSON(dict("synth_id" = synth_id, list("node_ids"=nids)), auto_unbox=TRUE)
synth_id = "snacktavish_aves_81461_tmpr7hqi81k"
nids <- c("ott5839486","mrcaott109888ott176333")
jsonlite::toJSON(list("synth_id" = synth_id, list("node_ids"=nids)), auto_unbox=TRUE)
jsonlite::toJSON(list("synth_id" = synth_id, "node_ids"=nids), auto_unbox=TRUE)
library(ape)
library(ape)
library(RCurl)
library(jsonlite)
#setwd("/Users/etm45/Documents/Work/Research/BirdTree")
#tree <- read.tree("data/addTaxaComplete24May2023.tre")
#taxa <- c("Setophaga_americana","Setophaga_dominica","Catharus_ustulatus","Catharus_minimus")
#pruned <- drop.tip(tree, setdiff(tree$tip.label,taxa))
url <- "https://aves.opentreeoflife.org/v3/tree_of_life/node_info"
headers <- c('Content-Type' = 'application/json')
nids = c("mrcaott246ott3364", "mrcaott22834ott532753", "mrcaott252688ott489372")
#body <- '{"synth_id":"snacktavish_aves_81461_tmpr7hqi81k","node_id":"mrcaott84218ott167137"}'
#body <- '{"synth_id": "snacktavish_aves_81461_tmpr7hqi81k", "node_ids":["ott5839486","mrcaott109888ott176333"]}'
body <- jsonlite::toJSON(list("synth_id"="snacktavish_aves_81461_tmpr7hqi81k", "node_ids"=pruned$node.label), auto_unbox=TRUE)
library(ape)
library(RCurl)
library(jsonlite)
#setwd("/Users/etm45/Documents/Work/Research/BirdTree")
#tree <- read.tree("data/addTaxaComplete24May2023.tre")
#taxa <- c("Setophaga_americana","Setophaga_dominica","Catharus_ustulatus","Catharus_minimus")
#pruned <- drop.tip(tree, setdiff(tree$tip.label,taxa))
url <- "https://aves.opentreeoflife.org/v3/tree_of_life/node_info"
headers <- c('Content-Type' = 'application/json')
nids = c("mrcaott246ott3364", "mrcaott22834ott532753", "mrcaott252688ott489372")
#body <- '{"synth_id":"snacktavish_aves_81461_tmpr7hqi81k","node_id":"mrcaott84218ott167137"}'
#body <- '{"synth_id": "snacktavish_aves_81461_tmpr7hqi81k", "node_ids":["ott5839486","mrcaott109888ott176333"]}'
body <- jsonlite::toJSON(list("synth_id"="snacktavish_aves_81461_tmpr7hqi81k", "node_ids"=nids), auto_unbox=TRUE)
response <- postForm(uri = url,
.opts = list(
postfields = body,
httpheader = headers
))
bidy
body
url <- "https://aves.opentreeoflife.org/v3/tree_of_life/node_info"
headers <- c('Content-Type' = 'application/json')
nids = c("mrcaott246ott3364", "mrcaott22834ott532753", "mrcaott252688ott489372")
#body <- '{"synth_id":"snacktavish_aves_81461_tmpr7hqi81k","node_id":"mrcaott84218ott167137"}'
#body <- '{"synth_id": "snacktavish_aves_81461_tmpr7hqi81k", "node_ids":["ott5839486","mrcaott109888ott176333"]}'
body <- jsonlite::toJSON(list("synth_id"="aves_0.1", "node_ids"=nids), auto_unbox=TRUE)
response <- postForm(uri = url,
.opts = list(
postfields = body,
httpheader = headers
))
# Parse the response into JSON format
parsed_json <- fromJSON(response)
# Print the parsed JSON
print(parsed_json)
data.frame(result = names(as.data.frame(jsonlite::fromJSON(myjson))))
data.frame(result = names(as.data.frame(jsonlite::fromJSON(parsed_json))))
data.frame(result = names(as.data.frame(jsonlite::fromJSON(response))))
as.data.frame(jsonlite::fromJSON(response)))
as.data.frame(jsonlite::fromJSON(response))
variable <- as.matrix(jsonData$supportedBy)
variable <- as.matrix(parsed_json$supportedBy)
parsed_json$supportedBy
colnames(parsed_json)
parsed_json["supported_by"]
parsed_json["supported_by"].colnames()
parsed_json["supported_by"].colnames
(parsed_json["supported_by"])
colnames(parsed_json["supported_by"])
parsed_json$supportedBy
url <- "https://aves.opentreeoflife.org/v3/tree_of_life/node_info"
headers <- c('Content-Type' = 'application/json')
nids = c("mrcaott246ott3364", "mrcaott22834ott532753", "mrcaott252688ott489372")
#body <- '{"synth_id":"snacktavish_aves_81461_tmpr7hqi81k","node_id":"mrcaott84218ott167137"}'
#body <- '{"synth_id": "snacktavish_aves_81461_tmpr7hqi81k", "node_ids":["ott5839486","mrcaott109888ott176333"]}'
body <- jsonlite::toJSON(list("synth_id"="aves_0.1", "node_ids"=nids), auto_unbox=TRUE)
response <- postForm(uri = url,
.opts = list(
postfields = body,
httpheader = headers
))
# Parse the response into JSON format
parsed_json <- fromJSON(response)
# Print the parsed JSON
print(parsed_json)
parsed_json$supportedBy
parsed_json$supported_by
library(rotl)
install.packages(rotl)
install.packages("rotl")
View(tr2)
library(rotl)
that_one_study <- get_study(study_id="pg_719", object_format="phylo")
that_one_study <- get_study(study_id="pg_719", object_format="phylo")
rotl::get_study_tree(study_id = study_id,
tree_id = tree_id,
tip_label = "ott_taxon_name",
deduplicate = TRUE),
rotl::get_study_tree(study_id = "pg_719",
tree_id = "tree1",
tip_label = "ott_taxon_name",
deduplicate = TRUE),
rotl::get_study_tree(study_id = "pg_719",
tree_id = "tree1",
tip_label = "ott_taxon_name",
deduplicate = TRUE)
rotl::get_study_tree(study_id = "pg_719",
tree_id = "tree1",
deduplicate = TRUE)
rotl::get_study_tree(study_id = "pg_719",
tree_id = "tree1")
that_one_study <- get_study(study_id="pg_719", object_format="phylo")
get_study(study_id="pg_719", object_format="phylo")
get_study_tree(study_id="pg_719",tree_id ="tree1294", object_format="phylo")
get_study_tree(study_id="pg_719",tree_id ="tree1294")
get_study_tree(study_id="pg_719",tree_id ="tree1294")
get_study(study_id="pg_719", tip_label = "ott_taxon_name", object_format="phylo")
library(rotl)
rotl::get_study(study_id="pg_719", tip_label = "ott_taxon_name", object_format="phylo")
get_study_tree(study_id="pg_719",tree_id ="tree1294",tip_label = "ott_taxon_name", object_format="phylo")
library(devtools)
install.packages(devtools)
install.packages("devtools")
library(devtools)
install_github("eliotmiller/clootl")
?getCitations
library(rotl)
res <- studies_find_trees(property="ot:ottTaxonName", value="Drosophila",
detailed=FALSE)
res
res <- studies_find_trees(property="ot:ottTaxonName", value="Sturnira",
detailed=TRUE)
res
res
height<-c(67.51857, 76.68247, 64.08928, 74.03816,
73.43453, 73.11980, 79.10271, 68.94156,
65.67993, 67.46553, 70.19523, 69.58237,
70.70368, 74.18195, 67.13931, 80.03950,
60.89369, 62.96556, 73.13099, 68.52943,
70.00357, 71.91846, 65.98554, 69.90164)
library(devtools)
install_github("eliotmiller/clootl")
library(clootl)
?getCitations
tree
tree <- extractTree(species="all.species", "scientific","current","current")
tree
setwd("~/projects/otapi/OpenTreeCLO/BirdTree_data_deposit/Tree_versions/Aves_0.1/Clements_2021")
write.tree(tree,"MCC.tre")
getCitations(tree)
cites<-getCitations(tree)
cites
View(cites)
